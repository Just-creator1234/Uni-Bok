generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                        String               @id @default(cuid())
  name                      String?
  email                     String               @unique
  password                  String?
  role                      Role                 @default(STUDENT)
  image                     String?
  level                     String?
  semester                  String?
  indexNo                   String?
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  hasRegistered             Boolean              @default(false)
   hasCompletedQuestionnaire Boolean              @default(false)
slug String? @unique 
  verificationToken         String?
  emailVerified             DateTime?
  verificationTokenExpiry   DateTime?
  accounts                  Account[]
  comments                  Comment[]
  PasswordResetToken        PasswordResetToken[]
  posts                     Post[]               @relation("Posts")
  ReadHistory               ReadHistory[]
  sessions                  Session[]
  bookmarkedPosts           Post[]               @relation("PostBookmarks")
  likedPosts                Post[]               @relation("PostLikes")
  courses                   Course[]             @relation("UserCourses")
}

model Course {
  id       String  @id @default(cuid())
  code     String  @unique
  title    String
  slug     String  @unique
  level    String
  semester String
  topics   Topic[]
  users    User[]  @relation("UserCourses")
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contents    Content[]
  course      Course    @relation(fields: [courseId], references: [id])
}

model Content {
  id          Int         @id @default(autoincrement())
  topicId     Int
  type        ContentType
  title       String
  description String?
  fileUrl     String
  format      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  topic       Topic       @relation(fields: [topicId], references: [id])
}

model Post {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  subtitle        String?
  content         Json
  excerpt         String?
  published       Boolean       @default(false)
  status          PostStatus    @default(DRAFT)
  publishDate     DateTime?
  publishedAt     DateTime?
  authorId        String
  coAuthors       Json?
  coverImage      String?
  altText         String?
  gallery         Json?
  videoUrl        String?
  audioUrl        String?
  metaTitle       String?
  metaDescription String?
  focusKeyword    String?
  canonicalUrl    String?
  targetKeywords  Json?
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  twitterCard     String?       @default("summary_large_image")
  language        String?       @default("en")
  series          String?
  seriesOrder     Int?          @default(1)
  password        String?
  allowComments   Boolean       @default(true)
  allowSharing    Boolean       @default(true)
  featured        Boolean       @default(false)
  sticky          Boolean       @default(false)
  breaking        Boolean       @default(false)
  editorNotes     String?
  customFields    Json?
  viewCount       Int           @default(0)
  trendingScore   Float         @default(0)
  lastViewedAt    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  comments        Comment[]
  author          User          @relation("Posts", fields: [authorId], references: [id], onDelete: Cascade)
  readHistory     ReadHistory[]
  categories      Category[]    @relation("CategoryToPost")
  bookmarks       User[]        @relation("PostBookmarks")
  likes           User[]        @relation("PostLikes")
  tags            Tag[]         @relation("PostToTag")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String? @default("#6b7280")
  posts       Post[]  @relation("CategoryToPost")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostToTag")
}

model Comment {
  id           String   @id @default(cuid())
  content      String
  authorId     String
  postId       String
  parentId     String?
  likes        Int      @default(0)
  isEdited     Boolean  @default(false)
  editedAt     DateTime?
  isDeleted    Boolean  @default(false)  // Soft delete flag
  deletedAt    DateTime?                 // When it was deleted
  deletedBy    String?                   // Who deleted it (user ID)
  deleteReason String?                   // Optional reason for moderation
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent       Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[] @relation("CommentReplies")
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([parentId])
}
model ReadHistory {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  readAt    DateTime @default(now())
  timeSpent Int?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([token])
}

enum Role {
  STUDENT
  ADMIN
}

enum ContentType {
  SLIDES
  QUIZ
  ASSIGNMENT
  PAST_QUESTION
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}
